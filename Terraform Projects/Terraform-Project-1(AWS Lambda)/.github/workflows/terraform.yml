name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [13.x]

    steps:
    - uses: actions/checkout@v2

    - name: Cache Node modules
      id: node-Cache
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
        key: node-modules-${{ hashFiles('hello-world/package-lock.json') }}


    - name: Use Node.js ${{matrix.node-version}}
      uses: actions/setup-node@v1
      with:
       node-version: ${{matrix.node-version}}
    - run: |
        cd hello-world
        # uncomment npm install if running locally using nektos/act
        npm install
        npm run test

  build:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true 
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [13.x]

    steps:
    - uses: actions/checkout@v2

    - name: Cache Node modules
      id: node-Cache
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
        key: node-modules-${{ hashFiles('hello-world/package-lock.json') }}

    - name: Install Dependencies
      if: steps.node-cache.outputs.cache-hit != 'true'
      run: |
        cd hello-world
        npm install
        
    - name: Use Node.js ${{matrix.node-version}}
      uses: actions/setup-node@v1
      with:
       node-version: ${{matrix.node-version}}
    - run: |
        cd hello-world
        npm run build-optimized
    
    - name: Configure AWS credentials from Test account
      uses:  aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 
    - run: |
        aws s3 cp hello-world/dist/app.js.zip s3://notes-app-uploads-cloudxpert
        aws s3 ls notes-app-uploads-cloudxpert

  deploy:
    name: 'Deploy'
    needs: build
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config=backend.hcl

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
      run: terraform apply -auto-approve